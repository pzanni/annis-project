{"version":3,"sources":["data/Food_Production.csv","data/animals-slaughtered-for-meat.csv","data/meat_consumption_worldwide.csv","App.js","reportWebVitals.js","index.js"],"names":["App","useState","rows","setRows","useEffect","a","fetch","food_production_env_impact","response","reader","body","getReader","read","result","decoder","TextDecoder","csv","decode","value","results","Papa","parse","header","data","console","log","titles","values","forEach","row","push","TESTER","document","getElementById","type","x","y","marker","color","line","width","Plotly","newPlot","title","font","size","responsive","BUILD","className","id","style","height","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"wRAAe,GCAA,ICAA,IFAA,IAA0B,6C,OGoE1BA,MA5Df,WAAgB,IAAD,EAEWC,mBAAS,IAFpB,mBAENC,EAFM,KAEAC,EAFA,KAqDb,OAlDAC,oBAAS,sBAAC,wCAAAC,EAAA,sEACeC,MAAMC,GADrB,cACFC,EADE,OAEFC,EAASD,EAASE,KAAKC,YAFrB,SAGaF,EAAOG,OAHpB,OAGFC,EAHE,OAIFC,EAAU,IAAIC,YAAY,SAC1BC,EAAMF,EAAQG,OAAOJ,EAAOK,OAC5BC,EAAUC,IAAKC,MAAML,EAAK,CAAEM,QAAQ,IACpCpB,EAAOiB,EAAQI,KACrBpB,EAAQD,GACRsB,QAAQC,IAAIvB,GATJ,4CAUP,IAEHE,qBAAU,WAER,IAAIsB,EAAS,GACTC,EAAS,GAEbzB,EAAK0B,SAAQ,SAAAC,GACXH,EAAOI,KAAKD,EAAI,iBAChBF,EAAOG,KAAKD,EAAG,oBAGjB,IAAME,EAASC,SAASC,eAAe,UAanCV,EAAO,CAZE,CACXW,KAAM,MACNC,EAAGT,EACHU,EAAGT,EACHU,OAAQ,CACNC,MAAO,UACPC,KAAM,CACJC,MAAO,QAcbC,IAAOC,QAAQX,EAAQR,EAPV,CACXoB,MAAO,wCACPC,KAAM,CAAEC,KAAM,KAGH,CAAEC,YAAY,OAM7BtB,QAAQC,IAAIgB,IAAOM,OAGjB,qBAAKC,UAAU,MAAf,SACE,qBAAKC,GAAG,SAASC,MAAO,CAAEV,MAAO,SAAUW,OAAQ,cCnD1CC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF/B,SAASC,eAAe,SAM1BmB,M","file":"static/js/main.2471495e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Food_Production.c7230460.csv\";","export default __webpack_public_path__ + \"static/media/animals-slaughtered-for-meat.4f33439c.csv\";","export default __webpack_public_path__ + \"static/media/meat_consumption_worldwide.d8cf015a.csv\";","import './App.css';\nimport Plotly from 'plotly.js-dist'\nimport Papa from 'papaparse'\nimport React, { useEffect, useState } from 'react';\nimport animals_for_meat from './data/animals-slaughtered-for-meat.csv';\nimport worldwide_meat_consumption from './data/meat_consumption_worldwide.csv';\nimport food_production_env_impact from './data/Food_Production.csv';\n\nfunction App() {\n\n  const [rows, setRows] = useState([])\n  useEffect(async () => {\n    const response = await fetch(food_production_env_impact)\n    const reader = response.body.getReader()\n    const result = await reader.read() // raw array\n    const decoder = new TextDecoder('utf-8')\n    const csv = decoder.decode(result.value) // the csv text\n    const results = Papa.parse(csv, { header: true }) // object with { data, errors, meta }\n    const rows = results.data // array of objects\n    setRows(rows)\n    console.log(rows)\n  }, [])\n\n  useEffect(() => {\n\n    let titles = [];\n    let values = [];\n\n    rows.forEach(row => {\n      titles.push(row['Food product']);\n      values.push(row['Total_emissions']);\n    });\n\n    const TESTER = document.getElementById('tester');\n    var trace1 = {\n      type: 'bar',\n      x: titles,\n      y: values,\n      marker: {\n        color: '#C8A2C8',\n        line: {\n          width: 2.5\n        }\n      }\n    };\n\n    var data = [trace1];\n\n    var layout = {\n      title: 'Environment Impact of Food Production',\n      font: { size: 18 }\n    };\n\n    var config = { responsive: true }\n\n    Plotly.newPlot(TESTER, data, layout, config);\n  });\n\n  /* Current Plotly.js version */\n  console.log(Plotly.BUILD);\n\n  return (\n    <div className=\"App\">\n      <div id=\"tester\" style={{ width: '1200px', height: '500px' }}></div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}