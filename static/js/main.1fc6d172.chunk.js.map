{"version":3,"sources":["data/animals-slaughtered-for-meat.csv","data/meat_consumption_worldwide.csv","data/Food_Production.csv","fileFetchHook.js","App.js","reportWebVitals.js","index.js"],"names":["useFetchFile","source","useState","rows","setRows","useEffect","a","fetch","response","reader","body","getReader","read","result","decoder","TextDecoder","csv","decode","value","results","Papa","parse","header","data","App","selectedAnimal","setSelectedAnimal","years","setYears","React","updateState","forceUpdate","useCallback","food_env_impact","food_production_env_impact","meat_consumption","worldwide_meat_consumption","animals_killed","animals_for_meat","red","pigColor","cowColor","birdColor","sheepColor","gatherFoodEnvImpactData","gatherMeatConsumptionData","gatherAnimalKillData","newAnimal","titles","forEach","row","index","includes","parseInt","push","pop","totalKilled","cowsKilled","birdsKilled","pigsKilled","sheepKilled","year","total","cows","birds","pigs","sheep","totalKillsTrace","x","y","name","marker","color","cowsKilledTrace","birdsKilledTrace","pigsKilledTrace","sheepKilledTrace","showTrace","animal","selected","plotAnimalsKilled","DIV","document","getElementById","Plotly","newPlot","title","font","size","family","yaxis","text","values","beefValues","pigValues","sheepValues","poltryValues","sort","yearConsumption","beefConsumption","pigConsumption","sheepConsumption","poltryConsumption","totalTrace","beefTrace","pigTrace","sheepTrace","poltryTrace","redTitles","redValues","veganFoodProducts","filterAnimal","animalFoodProducts","console","log","type","responsive","onChangeData","className","onClick","id","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.1fc6d172.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/animals-slaughtered-for-meat.4f33439c.csv\";","export default __webpack_public_path__ + \"static/media/meat_consumption_worldwide.d8cf015a.csv\";","export default __webpack_public_path__ + \"static/media/Food_Production.c7230460.csv\";","import { useState, useEffect } from 'react';\nimport Papa from 'papaparse'\n\nexport function useFetchFile(source) {\n    const [rows, setRows] = useState([])\n\n  useEffect(async () => {\n    const response = await fetch(source);\n    const reader = response.body.getReader();\n    const result = await reader.read();\n    const decoder = new TextDecoder('utf-8');\n    const csv = decoder.decode(result.value);\n    const results = Papa.parse(csv, { header: true });\n    const rows = results.data;\n    setRows(rows);\n  }, []);\n\n  return rows;\n}","import \"./App.css\";\nimport Plotly from \"plotly.js-dist\";\nimport React, { useEffect, useState } from \"react\";\nimport animals_for_meat from \"./data/animals-slaughtered-for-meat.csv\";\nimport worldwide_meat_consumption from \"./data/meat_consumption_worldwide.csv\";\nimport food_production_env_impact from \"./data/Food_Production.csv\";\nimport { useFetchFile } from \"./fileFetchHook\";\n\nfunction App() {\n  const [selectedAnimal, setSelectedAnimal] = useState(\"all\"); // all, pig, bird, cow, sheep\n  const [years, setYears] = useState([]);\n  const [, updateState] = React.useState();\n  const forceUpdate = React.useCallback(() => updateState({}), []);\n\n  const food_env_impact = useFetchFile(food_production_env_impact);\n  const meat_consumption = useFetchFile(worldwide_meat_consumption);\n  const animals_killed = useFetchFile(animals_for_meat);\n\n  const green = '#4a9d02';\n  const red = '#dc143c';\n  const pigColor = '#fa9c9b';\n  const cowColor = '#545c58';\n  const birdColor = '#faa008';\n  const sheepColor = '#dadae4';\n\n  useEffect(() => {\n    gatherFoodEnvImpactData();\n  }, [food_env_impact]);\n\n  useEffect(() => {\n    gatherMeatConsumptionData();\n  }, [meat_consumption, animals_killed]);\n\n  useEffect(() => {\n    gatherAnimalKillData();\n  }, [animals_killed, years]);\n\n  const gatherAnimalKillData = (newAnimal) => {\n    let titles = [];\n    meat_consumption.forEach((row, index) => {\n      if (!titles.includes(parseInt(row[\"TIME\"])) && row[\"TIME\"] <= 2018) {\n        titles.push(parseInt(row[\"TIME\"]));\n      }\n    });\n\n    titles.pop(); //rm 1990\n\n    let totalKilled = [];\n    let cowsKilled = [];\n    let birdsKilled = [];\n    let pigsKilled = [];\n    let sheepKilled = [];\n\n    titles.forEach((year, index) => {\n      let total = 0;\n      let cows = 0;\n      let birds = 0;\n      let pigs = 0;\n      let sheep = 0;\n\n      animals_killed.forEach((row) => {\n        if (parseInt(row[\"Year\"]) === year) {\n          total =\n            total +\n            (parseInt(\n              row[\n                \"Livestock Primary - Meat, cattle - 867 - Producing Animals/Slaughtered - 5320 - Head\"\n              ]\n            ) || 0);\n          total =\n            total +\n            (parseInt(\n              row[\n                \"Livestock Primary - Meat, chicken - 1058 - Producing Animals/Slaughtered - 5321 - 1000 Head\"\n              ]\n            ) || 0);\n          total =\n            total +\n            (parseInt(\n              row[\n                \"Livestock Primary - Meat, turkey - 1080 - Producing Animals/Slaughtered - 5321 - 1000 Head\"\n              ]\n            ) || 0);\n          total =\n            total +\n            (parseInt(\n              row[\n                \"Livestock Primary - Meat, pig - 1035 - Producing Animals/Slaughtered - 5320 - Head\"\n              ]\n            ) || 0);\n          total =\n            total +\n            (parseInt(\n              row[\n                \"Livestock Primary - Meat, sheep - 977 - Producing Animals/Slaughtered - 5320 - Head\"\n              ]\n            ) || 0);\n\n          cows =\n            cows +\n            (parseInt(\n              row[\n                \"Livestock Primary - Meat, cattle - 867 - Producing Animals/Slaughtered - 5320 - Head\"\n              ]\n            ) || 0);\n          birds =\n            birds +\n            (parseInt(\n              row[\n                \"Livestock Primary - Meat, chicken - 1058 - Producing Animals/Slaughtered - 5321 - 1000 Head\"\n              ]\n            ) || 0);\n          birds =\n            birds +\n            (parseInt(\n              row[\n                \"Livestock Primary - Meat, turkey - 1080 - Producing Animals/Slaughtered - 5321 - 1000 Head\"\n              ]\n            ) || 0);\n          pigs =\n            pigs +\n            (parseInt(\n              row[\n                \"Livestock Primary - Meat, pig - 1035 - Producing Animals/Slaughtered - 5320 - Head\"\n              ]\n            ) || 0);\n          sheep =\n            sheep +\n            (parseInt(\n              row[\n                \"Livestock Primary - Meat, sheep - 977 - Producing Animals/Slaughtered - 5320 - Head\"\n              ]\n            ) || 0);\n        }\n      });\n      totalKilled[index] = total;\n      cowsKilled[index] = cows;\n      birdsKilled[index] = birds;\n      sheepKilled[index] = sheep;\n      pigsKilled[index] = pigs;\n    });\n\n    let totalKillsTrace = {\n      x: titles,\n      y: totalKilled,\n      name: \"All\",\n      marker: {\n        color: red\n      }\n    };\n\n    let cowsKilledTrace = {\n      x: titles,\n      y: cowsKilled,\n      name: \"Cows\",\n      marker: {\n        color: cowColor\n      }\n    };\n\n    let birdsKilledTrace = {\n      x: titles,\n      y: birdsKilled,\n      name: \"Birds\",\n      marker: {\n        color: birdColor\n      }\n    };\n\n    let pigsKilledTrace = {\n      x: titles,\n      y: pigsKilled,\n      name: \"Pigs\",\n      marker: {\n        color: pigColor\n      }\n    };\n\n    let sheepKilledTrace = {\n      x: titles,\n      y: sheepKilled,\n      name: \"Sheep\",\n      marker: {\n        color: sheepColor\n      }\n    };\n\n    const showTrace = (animal) => {\n      const selected = newAnimal ? newAnimal : selectedAnimal;\n      return selected === animal || selected === \"all\";\n    };\n\n    const data = [\n      showTrace(\"all\") ? totalKillsTrace : {},\n      showTrace(\"cow\") ? cowsKilledTrace : {},\n      showTrace(\"bird\") ? birdsKilledTrace : {},\n      showTrace(\"pig\") ? pigsKilledTrace : {},\n      showTrace(\"sheep\") ? sheepKilledTrace : {},\n    ];\n\n    plotAnimalsKilled(data);\n  };\n\n  const plotAnimalsKilled = (data) => {\n    var layout = {\n      title: \"Animals slaughtered for meat\",\n      font: { size: 21, family: \"'Chewy', cursive\", },\n      yaxis: {\n        title: {\n          text: \"Number of animals\",\n          font: {\n            family: \"'Chewy', cursive\",\n            size: 18,\n            color: \"#7f7f7f\",\n          },\n        },\n      },\n    };\n\n    const DIV = document.getElementById(\"animals_killed\");\n    if (DIV) Plotly.newPlot(DIV, data, layout);\n    forceUpdate();\n  };\n\n  const gatherMeatConsumptionData = (newAnimal) => {\n    let titles = []; // years\n    let values = [];\n    let beefValues = [];\n    let pigValues = [];\n    let sheepValues = [];\n    let poltryValues = [];\n\n    meat_consumption.forEach((row, index) => {\n      if (!titles.includes(parseInt(row[\"TIME\"]))) {\n        titles.push(parseInt(row[\"TIME\"]));\n      }\n    });\n\n    titles.sort();\n    setYears(years);\n\n    titles.forEach((year, index) => {\n      let yearConsumption = 0;\n      let beefConsumption = 0;\n      let pigConsumption = 0;\n      let sheepConsumption = 0;\n      let poltryConsumption = 0;\n\n      meat_consumption.forEach((row) => {\n        if (row[\"MEASURE\"] === \"KG_CAP\" && parseInt(row[\"TIME\"]) === year) {\n          yearConsumption = yearConsumption + parseInt(row[\"Value\"]);\n          if (row[\"SUBJECT\"] === \"BEEF\") {\n            beefConsumption = beefConsumption + parseInt(row[\"Value\"]);\n          } else if (row[\"SUBJECT\"] === \"PIG\") {\n            pigConsumption = pigConsumption + parseInt(row[\"Value\"]);\n          } else if (row[\"SUBJECT\"] === \"SHEEP\") {\n            sheepConsumption = sheepConsumption + parseInt(row[\"Value\"]);\n          } else if (row[\"SUBJECT\"] === \"POULTRY\") {\n            poltryConsumption = poltryConsumption + parseInt(row[\"Value\"]);\n          }\n        }\n      });\n      values[index] = yearConsumption;\n      beefValues[index] = beefConsumption;\n      pigValues[index] = pigConsumption;\n      sheepValues[index] = sheepConsumption;\n      poltryValues[index] = poltryConsumption;\n    });\n\n    const DIV = document.getElementById(\"meat_consumption\");\n\n    let totalTrace = {\n      x: titles,\n      y: values,\n      name: \"All\",\n      marker: {\n        color: red\n      }\n    };\n\n    let beefTrace = {\n      x: titles,\n      y: beefValues,\n      name: \"Cows\",\n      marker: {\n        color: cowColor\n      }\n    };\n\n    let pigTrace = {\n      x: titles,\n      y: pigValues,\n      name: \"Pig\",\n      marker: {\n        color: pigColor\n      }\n    };\n\n    let sheepTrace = {\n      x: titles,\n      y: sheepValues,\n      name: \"Sheep\",\n      marker: {\n        color: sheepColor\n      }\n    };\n\n    let poltryTrace = {\n      x: titles,\n      y: poltryValues,\n      name: \"Birds\",\n      marker: {\n        color: birdColor\n      }\n    };\n\n    var layout = {\n      title: \"Worldwide Meat Consumption Kg/capita\",\n      font: { size: 21, family: \"'Chewy', cursive\", },\n      yaxis: {\n        title: {\n          text: \"Kg/capita\",\n          font: {\n            family: \"'Chewy', cursive\",\n            size: 18,\n            color: \"#7f7f7f\",\n          },\n        },\n      },\n    };\n\n    const showTrace = (animal) => {\n      const selected = newAnimal ? newAnimal : selectedAnimal;\n      return selected === animal || selected === \"all\";\n    };\n\n    let data = [\n      showTrace(\"all\") ? totalTrace : {},\n      showTrace(\"cow\") ? beefTrace : {},\n      showTrace(\"pig\") ? pigTrace : {},\n      showTrace(\"bird\") ? poltryTrace : {},\n      showTrace(\"sheep\") ? sheepTrace : {},\n    ];\n    if (DIV) Plotly.newPlot(DIV, data, layout);\n    forceUpdate();\n  };\n\n  const gatherFoodEnvImpactData = (newAnimal) => {\n    let titles = [];\n    let values = [];\n    const redTitles = [];\n    const redValues = [];\n\n    const veganFoodProducts = [\n      \"Wheat & Rye (Bread)\",\n      \"Potatoes\",\n      \"Nuts\",\n      \"Soymilk\",\n      \"Tofu\",\n    ];\n\n    const filterAnimal = newAnimal || selectedAnimal;\n\n    const animalFoodProducts = [\n      filterAnimal === \"cow\" || filterAnimal === \"all\" ? \"Beef (beef herd)\" : \"\",\n      filterAnimal === \"cow\" || filterAnimal === \"all\" ? \"Beef (dairy herd)\" : \"\",\n      filterAnimal === \"cow\" || filterAnimal === \"all\" ? \"Milk\" : \"\",\n      filterAnimal === \"cow\" || filterAnimal === \"all\" ? \"Cheese\" : \"\",\n      filterAnimal === \"sheep\" || filterAnimal === \"all\" ? \"Lamb & Mutton\" : \"\",\n      filterAnimal === \"pig\" || filterAnimal === \"all\" ? \"Pig Meat\" : \"\",\n      filterAnimal === \"bird\" || filterAnimal === \"all\" ? \"Eggs\" : \"\",\n      filterAnimal === \"bird\" || filterAnimal === \"all\" ? \"Poultry Meat\" : \"\",\n    ];\n\n    food_env_impact.forEach((row) => {\n      console.log(row)\n      if (veganFoodProducts.includes(row[\"Food product\"])) {\n        titles.push(row[\"Food product\"]);\n        values.push(row[\"Greenhouse gas emissions per 100g protein (kgCO₂eq per 100g protein)\"]);\n      } else if (animalFoodProducts.includes(row[\"Food product\"])) {\n        redTitles.push(row[\"Food product\"]);\n        redValues.push(row[\"Greenhouse gas emissions per 100g protein (kgCO₂eq per 100g protein)\"]);\n      }\n    });\n\n    const DIV = document.getElementById(\"food_env_impact\");\n    var trace1 = {\n      type: \"bar\",\n      x: titles,\n      y: values,\n      marker: {\n        color: green,\n      },\n      name: 'Vegan foods'\n    };\n\n    var trace2 = {\n      type: 'bar',\n      x: redTitles,\n      y: redValues,\n      marker: {\n        color: red,\n      },\n      name: 'Animal products'\n    }\n\n    var data = [trace1, trace2];\n\n    var layout = {\n      title: \"Greenhouse gas emissions per 100g protein\",\n      font: { size: 21, family: \"'Chewy', cursive\", },\n      yaxis: {\n        title: {\n          text: \"kgCO₂eq per 100g protein\",\n          font: {\n            family: \"'Chewy', cursive\",\n            size: 18,\n            color: \"#7f7f7f\",\n          },\n        },\n      },\n    };\n\n    var config = { responsive: true };\n    if (DIV) Plotly.newPlot(DIV, data, layout, config);\n    forceUpdate();\n  };\n\n  const onChangeData = (newAnimal) => {\n    setSelectedAnimal(newAnimal);\n    gatherMeatConsumptionData(newAnimal);\n    gatherAnimalKillData(newAnimal);\n    gatherFoodEnvImpactData(newAnimal);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"contents\">\n        <span className=\"page-title big-text\">Cost of Food</span>\n        <p className=\"selected-animal big-text\">Select an animal</p>\n        <div className=\"buttons-container\">\n          <div className=\"buttons\">\n            <div\n              className={`animal-group ${\n                selectedAnimal === \"cow\" && \"selected\"\n              }`}\n            >\n              <button\n                className={`animal-button cow ${\n                  selectedAnimal == \"cow\" && \"selected\"\n                }`}\n                onClick={() => onChangeData(\"cow\")}\n              ></button>\n              <label>Cow</label>\n            </div>\n            <div\n              className={`animal-group ${\n                selectedAnimal === \"pig\" && \"selected\"\n              }`}\n            >\n              <button\n                className={`animal-button pig ${\n                  selectedAnimal == \"pig\" && \"selected\"\n                }`}\n                onClick={() => onChangeData(\"pig\")}\n              ></button>\n              <label>Pig</label>\n            </div>\n            <div\n              className={`animal-group ${\n                selectedAnimal === \"bird\" && \"selected\"\n              }`}\n            >\n              <button\n                className={`animal-button chicken ${\n                  selectedAnimal == \"bird\" && \"selected\"\n                }`}\n                onClick={() => onChangeData(\"bird\")}\n              ></button>\n              <label>Birds</label>\n            </div>\n            <div\n              className={`animal-group ${\n                selectedAnimal === \"sheep\" && \"selected\"\n              }`}\n            >\n              <button\n                className={`animal-button sheep ${\n                  selectedAnimal == \"sheep\" && \"selected\"\n                }`}\n                onClick={() => onChangeData(\"sheep\")}\n              ></button>\n              <label>Sheep</label>\n            </div>\n\n            <button className=\"all-button\" onClick={() => onChangeData(\"all\")}>\n              ALL\n            </button>\n          </div>\n        </div>\n        <div id=\"food_env_impact\" className=\"plot plot-tall\" />\n        <div id=\"meat_consumption\" className=\"plot plot-upper\" />\n        <div id=\"animals_killed\" className=\"plot plot-lower\" />\n      </div>\n      <div className=\"footer\">\n        <div>\n          Icons made by{\" \"}\n          <a href=\"https://www.flaticon.com/authors/surang\" title=\"surang\">\n            surang\n          </a>{\" \"}\n          from{\" \"}\n          <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">\n            www.flaticon.com\n          </a>\n        </div>\n        <div>\n          Icons made by{\" \"}\n          <a href=\"https://www.freepik.com\" title=\"Freepik\">\n            Freepik\n          </a>{\" \"}\n          from{\" \"}\n          <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">\n            www.flaticon.com\n          </a>\n        </div>\n        <a href=\"https://www.freepik.com/vectors/background\">\n          Background vector created by starline - www.freepik.com\n        </a>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}