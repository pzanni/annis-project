{"version":3,"sources":["data/animals-slaughtered-for-meat.csv","data/meat_consumption_worldwide.csv","data/Food_Production.csv","fileFetchHook.js","App.js","reportWebVitals.js","index.js"],"names":["useFetchFile","source","useState","rows","setRows","useEffect","a","fetch","response","reader","body","getReader","read","result","decoder","TextDecoder","csv","decode","value","results","Papa","parse","header","data","App","years","setYears","food_env_impact","food_production_env_impact","meat_consumption","worldwide_meat_consumption","animals_killed","animals_for_meat","gatherFoodEnvImpactData","gatherMeatConsumptionData","gatherAnimalKillData","titles","forEach","row","index","includes","parseInt","push","totalKilled","cowsKilled","birdsKilled","pigsKilled","sheepKilled","year","total","cows","birds","pigs","sheep","console","log","DIV","document","getElementById","x","y","name","Plotly","newPlot","title","font","size","yaxis","text","family","color","values","beefValues","pigValues","sheepValues","poltryValues","sort","yearConsumption","beefConsumption","pigConsumption","sheepConsumption","poltryConsumption","type","marker","line","width","responsive","className","id","style","height","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.fe67e8d6.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/animals-slaughtered-for-meat.4f33439c.csv\";","export default __webpack_public_path__ + \"static/media/meat_consumption_worldwide.d8cf015a.csv\";","export default __webpack_public_path__ + \"static/media/Food_Production.c7230460.csv\";","import { useState, useEffect } from 'react';\nimport Papa from 'papaparse'\n\nexport function useFetchFile(source) {\n    const [rows, setRows] = useState([])\n\n  useEffect(async () => {\n    const response = await fetch(source);\n    const reader = response.body.getReader();\n    const result = await reader.read();\n    const decoder = new TextDecoder('utf-8');\n    const csv = decoder.decode(result.value);\n    const results = Papa.parse(csv, { header: true });\n    const rows = results.data;\n    setRows(rows);\n  }, []);\n\n  return rows;\n}","import './App.css';\nimport Plotly from 'plotly.js-dist'\nimport React, { useEffect, useState } from 'react';\nimport animals_for_meat from './data/animals-slaughtered-for-meat.csv';\nimport worldwide_meat_consumption from './data/meat_consumption_worldwide.csv';\nimport food_production_env_impact from './data/Food_Production.csv';\nimport { useFetchFile } from './fileFetchHook';\n\nfunction App() {\n  const selectedAnimal = useState('all'); // all, pig, birds, cow, sheep\n  const [years, setYears] = useState([]);\n\n  const food_env_impact = useFetchFile(food_production_env_impact);\n  const meat_consumption = useFetchFile(worldwide_meat_consumption);\n  const animals_killed = useFetchFile(animals_for_meat);\n\n  useEffect(() => {\n    gatherFoodEnvImpactData();\n  }, [food_env_impact]);\n\n  useEffect(() => {\n    gatherMeatConsumptionData();\n  }, [meat_consumption, animals_killed]);\n\n  useEffect(() => {\n    gatherAnimalKillData();\n  }, [animals_killed, years]);\n\n  const gatherAnimalKillData = () => {\n    let titles = [];\n    meat_consumption.forEach((row, index) => {\n      if (!titles.includes(parseInt(row['TIME'])) && row['TIME'] <= 2018) {\n        titles.push(parseInt(row['TIME']));\n      };\n    });\n\n    let totalKilled = [];\n    let cowsKilled = [];\n    let birdsKilled = [];\n    let pigsKilled = [];\n    let sheepKilled = [];\n\n    titles.forEach((year, index) => {\n      let total = 0;\n      let cows = 0;\n      let birds = 0;\n      let pigs = 0;\n      let sheep = 0;\n\n      animals_killed.forEach(row => {\n        if (parseInt(row['Year']) === year) {\n          total = total + (parseInt(row['Livestock Primary - Meat, cattle - 867 - Producing Animals/Slaughtered - 5320 - Head']) || 0);\n          total = total + (parseInt(row['Livestock Primary - Meat, chicken - 1058 - Producing Animals/Slaughtered - 5321 - 1000 Head']) || 0);\n          total = total + (parseInt(row['Livestock Primary - Meat, turkey - 1080 - Producing Animals/Slaughtered - 5321 - 1000 Head']) || 0);\n          total = total + (parseInt(row['Livestock Primary - Meat, pig - 1035 - Producing Animals/Slaughtered - 5320 - Head']) || 0);\n          total = total + (parseInt(row['Livestock Primary - Meat, sheep - 977 - Producing Animals/Slaughtered - 5320 - Head']) || 0);\n\n          cows = cows + (parseInt(row['Livestock Primary - Meat, cattle - 867 - Producing Animals/Slaughtered - 5320 - Head']) || 0);\n          birds = birds + (parseInt(row['Livestock Primary - Meat, chicken - 1058 - Producing Animals/Slaughtered - 5321 - 1000 Head']) || 0);\n          birds = birds + (parseInt(row['Livestock Primary - Meat, turkey - 1080 - Producing Animals/Slaughtered - 5321 - 1000 Head']) || 0);\n          pigs = pigs + (parseInt(row['Livestock Primary - Meat, pig - 1035 - Producing Animals/Slaughtered - 5320 - Head']) || 0);\n          sheep = sheep + (parseInt(row['Livestock Primary - Meat, sheep - 977 - Producing Animals/Slaughtered - 5320 - Head']) || 0); \n        }\n      });\n      totalKilled[index] = total;\n      cowsKilled[index] = cows;\n      birdsKilled[index] = birds;\n      sheepKilled[index] = sheep;\n      pigsKilled[index] = pigs;\n    });\n\n    console.log(titles);\n    console.log(totalKilled)\n\n    const DIV = document.getElementById('animals_killed');\n\n    let totalKillsTrace = {\n      x: titles,\n      y: totalKilled,\n      name: 'Total killed animals'\n    };\n\n    var layout = {\n      title: 'Animals slaughtered for meat',\n      font: { size: 18 },\n      yaxis: {\n        title: {\n          text: 'Number of animals',\n          font: {\n            family: 'Courier New, monospace',\n            size: 18,\n            color: '#7f7f7f'\n          }\n        }\n      }\n    };\n\n    let data = [totalKillsTrace];\n    Plotly.newPlot(DIV, data, layout);\n  }\n\n  const gatherMeatConsumptionData = () => {\n    let titles = []; // years\n    let values = [];\n    let beefValues = [];\n    let pigValues = [];\n    let sheepValues = [];\n    let poltryValues = [];\n\n    meat_consumption.forEach((row, index) => {\n      if (!titles.includes(parseInt(row['TIME']))) {\n        titles.push(parseInt(row['TIME']));\n      };\n    });\n\n    titles.sort();\n    setYears(years);\n\n    titles.forEach((year, index) => {\n      let yearConsumption = 0;\n      let beefConsumption = 0;\n      let pigConsumption = 0;\n      let sheepConsumption = 0;\n      let poltryConsumption = 0;\n\n      meat_consumption.forEach(row => {\n        if (row['MEASURE'] === 'KG_CAP' && parseInt(row['TIME']) === year) {\n          yearConsumption = yearConsumption + parseInt(row['Value']);\n          if (row['SUBJECT'] === 'BEEF') {\n            beefConsumption = beefConsumption + parseInt(row['Value']);\n          } else if (row['SUBJECT'] === 'PIG') {\n            pigConsumption = pigConsumption + parseInt(row['Value']);\n          } else if (row['SUBJECT'] === 'SHEEP') {\n            sheepConsumption = sheepConsumption + parseInt(row['Value']);\n          } else if (row['SUBJECT'] === 'POULTRY') {\n            poltryConsumption = poltryConsumption + parseInt(row['Value']);\n          }\n        }\n      });\n      values[index] = yearConsumption;\n      beefValues[index] = beefConsumption;\n      pigValues[index] = pigConsumption;\n      sheepValues[index] = sheepConsumption;\n      poltryValues[index] = poltryConsumption;\n    });\n    \n    const DIV = document.getElementById('meat_consumption');\n\n    let totalTrace = {\n      x: titles,\n      y: values,\n      name: 'All animals'\n    };\n\n    let beefTrace = {\n      x: titles,\n      y: beefValues,\n      name: 'Cows'\n    };\n\n    let pigTrace = {\n      x: titles,\n      y: pigValues,\n      name: 'Pig'\n    };\n\n    let sheepTrace = {\n      x: titles,\n      y: sheepValues,\n      name: 'Sheep'\n    };\n\n    let poltryTrace = {\n      x: titles,\n      y: poltryValues,\n      name: 'Domestic birds'\n    };\n\n    var layout = {\n      title: 'Worldwide Meat Consumption',\n      font: { size: 18 },\n      yaxis: {\n        title: {\n          text: 'Kg/capita',\n          font: {\n            family: 'Courier New, monospace',\n            size: 18,\n            color: '#7f7f7f'\n          }\n        }\n      }\n    };\n\n    let data = [totalTrace, beefTrace, pigTrace, sheepTrace, poltryTrace];\n    Plotly.newPlot(DIV, data, layout);\n  }\n\n  const gatherFoodEnvImpactData = () => {\n    let titles = [];\n    let values = [];\n\n    food_env_impact.forEach(row => {\n      titles.push(row['Food product']);\n      values.push(row['Total_emissions']);\n    });\n\n    const DIV = document.getElementById('food_env_impact');\n    var trace1 = {\n      type: 'bar',\n      x: titles,\n      y: values,\n      marker: {\n        color: '#C8A2C8',\n        line: {\n          width: 2.5\n        }\n      }\n    };\n\n    var data = [trace1];\n\n    var layout = {\n      title: 'Environment Impact of Food Production',\n      font: { size: 18 }\n    };\n\n    var config = { responsive: true }\n    Plotly.newPlot(DIV, data, layout, config);\n  }\n\n  return (\n    <div className=\"App\">\n      <div id=\"food_env_impact\" style={{ width: '1200px', height: '500px' }} />\n      <div id=\"meat_consumption\" style={{ width: '1200px', height: '500px' }} />\n      <div id=\"animals_killed\" style={{ width: '1200px', height: '500px' }} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}