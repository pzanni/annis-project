{"version":3,"sources":["data/animals-slaughtered-for-meat.csv","data/meat_consumption_worldwide.csv","data/Food_Production.csv","fileFetchHook.js","App.js","reportWebVitals.js","index.js"],"names":["useFetchFile","source","useState","rows","setRows","useEffect","a","fetch","response","reader","body","getReader","read","result","decoder","TextDecoder","csv","decode","value","results","Papa","parse","header","data","App","selectedAnimal","setSelectedAnimal","years","setYears","React","updateState","forceUpdate","useCallback","food_env_impact","food_production_env_impact","meat_consumption","worldwide_meat_consumption","animals_killed","animals_for_meat","gatherFoodEnvImpactData","gatherMeatConsumptionData","gatherAnimalKillData","newAnimal","titles","forEach","row","index","includes","parseInt","push","pop","totalKilled","cowsKilled","birdsKilled","pigsKilled","sheepKilled","year","total","cows","birds","pigs","sheep","totalKillsTrace","x","y","name","cowsKilledTrace","birdsKilledTrace","pigsKilledTrace","sheepKilledTrace","showTrace","animal","selected","plotAnimalsKilled","DIV","document","getElementById","Plotly","newPlot","title","font","size","yaxis","text","family","color","values","beefValues","pigValues","sheepValues","poltryValues","sort","yearConsumption","beefConsumption","pigConsumption","sheepConsumption","poltryConsumption","totalTrace","beefTrace","pigTrace","sheepTrace","poltryTrace","type","marker","line","width","responsive","onChangeData","className","onClick","style","id","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.0631154e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/animals-slaughtered-for-meat.4f33439c.csv\";","export default __webpack_public_path__ + \"static/media/meat_consumption_worldwide.d8cf015a.csv\";","export default __webpack_public_path__ + \"static/media/Food_Production.c7230460.csv\";","import { useState, useEffect } from 'react';\nimport Papa from 'papaparse'\n\nexport function useFetchFile(source) {\n    const [rows, setRows] = useState([])\n\n  useEffect(async () => {\n    const response = await fetch(source);\n    const reader = response.body.getReader();\n    const result = await reader.read();\n    const decoder = new TextDecoder('utf-8');\n    const csv = decoder.decode(result.value);\n    const results = Papa.parse(csv, { header: true });\n    const rows = results.data;\n    setRows(rows);\n  }, []);\n\n  return rows;\n}","import \"./App.css\";\nimport Plotly from \"plotly.js-dist\";\nimport React, { useEffect, useState } from \"react\";\nimport animals_for_meat from \"./data/animals-slaughtered-for-meat.csv\";\nimport worldwide_meat_consumption from \"./data/meat_consumption_worldwide.csv\";\nimport food_production_env_impact from \"./data/Food_Production.csv\";\nimport { useFetchFile } from \"./fileFetchHook\";\n\nfunction App() {\n  const [selectedAnimal, setSelectedAnimal] = useState(\"cow\"); // all, pig, bird, cow, sheep\n  const [years, setYears] = useState([]);\n  const [plot1Data, setPlot1Data] = useState([]);\n  const [plot2Data, setPlot2Data] = useState([]);\n  const [plot3Data, setPlot3Data] = useState([]);\n  const [, updateState] = React.useState();\n  const forceUpdate = React.useCallback(() => updateState({}), []);\n\n  const food_env_impact = useFetchFile(food_production_env_impact);\n  const meat_consumption = useFetchFile(worldwide_meat_consumption);\n  const animals_killed = useFetchFile(animals_for_meat);\n\n  useEffect(() => {\n    gatherFoodEnvImpactData();\n  }, [food_env_impact]);\n\n  useEffect(() => {\n    gatherMeatConsumptionData();\n  }, [meat_consumption, animals_killed]);\n\n  useEffect(() => {\n    gatherAnimalKillData();\n  }, [animals_killed, years]);\n\n  const gatherAnimalKillData = (newAnimal) => {\n    let titles = [];\n    meat_consumption.forEach((row, index) => {\n      if (!titles.includes(parseInt(row[\"TIME\"])) && row[\"TIME\"] <= 2018) {\n        titles.push(parseInt(row[\"TIME\"]));\n      }\n    });\n\n    titles.pop(); //rm 1990\n\n    let totalKilled = [];\n    let cowsKilled = [];\n    let birdsKilled = [];\n    let pigsKilled = [];\n    let sheepKilled = [];\n\n    titles.forEach((year, index) => {\n      let total = 0;\n      let cows = 0;\n      let birds = 0;\n      let pigs = 0;\n      let sheep = 0;\n\n      animals_killed.forEach((row) => {\n        if (parseInt(row[\"Year\"]) === year) {\n          total =\n            total +\n            (parseInt(\n              row[\n                \"Livestock Primary - Meat, cattle - 867 - Producing Animals/Slaughtered - 5320 - Head\"\n              ]\n            ) || 0);\n          total =\n            total +\n            (parseInt(\n              row[\n                \"Livestock Primary - Meat, chicken - 1058 - Producing Animals/Slaughtered - 5321 - 1000 Head\"\n              ]\n            ) || 0);\n          total =\n            total +\n            (parseInt(\n              row[\n                \"Livestock Primary - Meat, turkey - 1080 - Producing Animals/Slaughtered - 5321 - 1000 Head\"\n              ]\n            ) || 0);\n          total =\n            total +\n            (parseInt(\n              row[\n                \"Livestock Primary - Meat, pig - 1035 - Producing Animals/Slaughtered - 5320 - Head\"\n              ]\n            ) || 0);\n          total =\n            total +\n            (parseInt(\n              row[\n                \"Livestock Primary - Meat, sheep - 977 - Producing Animals/Slaughtered - 5320 - Head\"\n              ]\n            ) || 0);\n\n          cows =\n            cows +\n            (parseInt(\n              row[\n                \"Livestock Primary - Meat, cattle - 867 - Producing Animals/Slaughtered - 5320 - Head\"\n              ]\n            ) || 0);\n          birds =\n            birds +\n            (parseInt(\n              row[\n                \"Livestock Primary - Meat, chicken - 1058 - Producing Animals/Slaughtered - 5321 - 1000 Head\"\n              ]\n            ) || 0);\n          birds =\n            birds +\n            (parseInt(\n              row[\n                \"Livestock Primary - Meat, turkey - 1080 - Producing Animals/Slaughtered - 5321 - 1000 Head\"\n              ]\n            ) || 0);\n          pigs =\n            pigs +\n            (parseInt(\n              row[\n                \"Livestock Primary - Meat, pig - 1035 - Producing Animals/Slaughtered - 5320 - Head\"\n              ]\n            ) || 0);\n          sheep =\n            sheep +\n            (parseInt(\n              row[\n                \"Livestock Primary - Meat, sheep - 977 - Producing Animals/Slaughtered - 5320 - Head\"\n              ]\n            ) || 0);\n        }\n      });\n      totalKilled[index] = total;\n      cowsKilled[index] = cows;\n      birdsKilled[index] = birds;\n      sheepKilled[index] = sheep;\n      pigsKilled[index] = pigs;\n    });\n\n    let totalKillsTrace = {\n      x: titles,\n      y: totalKilled,\n      name: \"all\",\n    };\n\n    let cowsKilledTrace = {\n      x: titles,\n      y: cowsKilled,\n      name: \"cows\",\n    };\n\n    let birdsKilledTrace = {\n      x: titles,\n      y: birdsKilled,\n      name: \"birds\",\n    };\n\n    let pigsKilledTrace = {\n      x: titles,\n      y: pigsKilled,\n      name: \"pigs\",\n    };\n\n    let sheepKilledTrace = {\n      x: titles,\n      y: sheepKilled,\n      name: \"sheep\",\n    };\n\n    const showTrace = (animal) => {\n      const selected = newAnimal ? newAnimal : selectedAnimal;\n      return selected === animal || selected === \"all\";\n    }\n\n    const data = [\n      showTrace('all') ? totalKillsTrace: {},\n      showTrace('cow') ? cowsKilledTrace: {},\n      showTrace('bird') ? birdsKilledTrace: {},\n      showTrace('pig') ? pigsKilledTrace: {},\n      showTrace('sheep') ? sheepKilledTrace: {},\n    ];\n\n    plotAnimalsKilled(data);\n  };\n\n  const plotAnimalsKilled = (data) => {\n    var layout = {\n      title: \"Animals slaughtered for meat\",\n      font: { size: 18 },\n      yaxis: {\n        title: {\n          text: \"Number of animals\",\n          font: {\n            family: \"Courier New, monospace\",\n            size: 18,\n            color: \"#7f7f7f\",\n          },\n        },\n      },\n    };\n\n    const DIV = document.getElementById(\"animals_killed\");\n    if (DIV) Plotly.newPlot(DIV, data, layout);\n    forceUpdate();\n  };\n\n  const gatherMeatConsumptionData = (newAnimal) => {\n    let titles = []; // years\n    let values = [];\n    let beefValues = [];\n    let pigValues = [];\n    let sheepValues = [];\n    let poltryValues = [];\n\n    meat_consumption.forEach((row, index) => {\n      if (!titles.includes(parseInt(row[\"TIME\"]))) {\n        titles.push(parseInt(row[\"TIME\"]));\n      }\n    });\n\n    titles.sort();\n    setYears(years);\n\n    titles.forEach((year, index) => {\n      let yearConsumption = 0;\n      let beefConsumption = 0;\n      let pigConsumption = 0;\n      let sheepConsumption = 0;\n      let poltryConsumption = 0;\n\n      meat_consumption.forEach((row) => {\n        if (row[\"MEASURE\"] === \"KG_CAP\" && parseInt(row[\"TIME\"]) === year) {\n          yearConsumption = yearConsumption + parseInt(row[\"Value\"]);\n          if (row[\"SUBJECT\"] === \"BEEF\") {\n            beefConsumption = beefConsumption + parseInt(row[\"Value\"]);\n          } else if (row[\"SUBJECT\"] === \"PIG\") {\n            pigConsumption = pigConsumption + parseInt(row[\"Value\"]);\n          } else if (row[\"SUBJECT\"] === \"SHEEP\") {\n            sheepConsumption = sheepConsumption + parseInt(row[\"Value\"]);\n          } else if (row[\"SUBJECT\"] === \"POULTRY\") {\n            poltryConsumption = poltryConsumption + parseInt(row[\"Value\"]);\n          }\n        }\n      });\n      values[index] = yearConsumption;\n      beefValues[index] = beefConsumption;\n      pigValues[index] = pigConsumption;\n      sheepValues[index] = sheepConsumption;\n      poltryValues[index] = poltryConsumption;\n    });\n\n    const DIV = document.getElementById(\"meat_consumption\");\n\n    let totalTrace = {\n      x: titles,\n      y: values,\n      name: \"All animals\",\n    };\n\n    let beefTrace = {\n      x: titles,\n      y: beefValues,\n      name: \"Cows\",\n    };\n\n    let pigTrace = {\n      x: titles,\n      y: pigValues,\n      name: \"Pig\",\n    };\n\n    let sheepTrace = {\n      x: titles,\n      y: sheepValues,\n      name: \"Sheep\",\n    };\n\n    let poltryTrace = {\n      x: titles,\n      y: poltryValues,\n      name: \"Domestic birds\",\n    };\n\n    var layout = {\n      title: \"Worldwide Meat Consumption Kg/capita\",\n      font: { size: 18 },\n      yaxis: {\n        title: {\n          text: \"Kg/capita\",\n          font: {\n            family: \"Courier New, monospace\",\n            size: 18,\n            color: \"#7f7f7f\",\n          },\n        },\n      },\n    };\n\n    const showTrace = (animal) => {\n      const selected = newAnimal ? newAnimal : selectedAnimal;\n      return selected === animal || selected === \"all\";\n    }\n\n    let data = [\n      showTrace(\"all\") ? totalTrace : {},\n      showTrace(\"cow\") ? beefTrace : {},\n      showTrace(\"pig\") ? pigTrace : {},\n      showTrace(\"bird\") ? poltryTrace : {},\n      showTrace(\"sheep\") ? sheepTrace : {},\n    ];\n    if (DIV) Plotly.newPlot(DIV, data, layout);\n    forceUpdate();\n  };\n\n  const gatherFoodEnvImpactData = () => {\n    let titles = [];\n    let values = [];\n\n    food_env_impact.forEach((row) => {\n      titles.push(row[\"Food product\"]);\n      values.push(row[\"Total_emissions\"]);\n    });\n\n    const DIV = document.getElementById(\"food_env_impact\");\n    var trace1 = {\n      type: \"bar\",\n      x: titles,\n      y: values,\n      marker: {\n        color: \"#C8A2C8\",\n        line: {\n          width: 2.5,\n        },\n      },\n    };\n\n    var data = [trace1];\n\n    var layout = {\n      title: \"Environment Impact of Food Production\",\n      font: { size: 18 },\n    };\n\n    var config = { responsive: true };\n    if (DIV) Plotly.newPlot(DIV, data, layout, config);\n    forceUpdate();\n  };\n\n  const onChangeData = (newAnimal) => {\n    setSelectedAnimal(newAnimal);\n    gatherMeatConsumptionData(newAnimal);\n    gatherAnimalKillData(newAnimal);\n  };\n\n  return (\n    <div className=\"App\">\n      <span className=\"page-title big-text\">Cost of Food</span>\n      <p className=\"selected-animal big-text\">Start by selecting an animal</p>\n      <div className=\"buttons\">\n        <div\n          className={`animal-group ${selectedAnimal === \"cow\" && \"selected\"}`}\n        >\n          <button\n            className={`animal-button cow ${\n              selectedAnimal == \"cow\" && \"selected\"\n            }`}\n            onClick={() => onChangeData(\"cow\")}\n          ></button>\n          <label>Cow</label>\n        </div>\n        <div\n          className={`animal-group ${selectedAnimal === \"pig\" && \"selected\"}`}\n        >\n          <button\n            className={`animal-button pig ${\n              selectedAnimal == \"pig\" && \"selected\"\n            }`}\n            onClick={() => onChangeData(\"pig\")}\n          ></button>\n          <label>Pig</label>\n        </div>\n        <div\n          className={`animal-group ${selectedAnimal === \"bird\" && \"selected\"}`}\n        >\n          <button\n            className={`animal-button chicken ${\n              selectedAnimal == \"bird\" && \"selected\"\n            }`}\n            onClick={() => onChangeData(\"bird\")}\n          ></button>\n          <label>Birds</label>\n        </div>\n        <div\n          className={`animal-group ${selectedAnimal === \"sheep\" && \"selected\"}`}\n        >\n          <button\n            className={`animal-button sheep ${\n              selectedAnimal == \"sheep\" && \"selected\"\n            }`}\n            onClick={() => onChangeData(\"sheep\")}\n          ></button>\n          <label>Sheep</label>\n        </div>\n\n        <button className=\"all-button\" onClick={() => onChangeData(\"all\")}>\n          ALL\n        </button>\n      </div>\n      <span className=\"selected-animal big-text\">\n        Showing data for:{\" \"}\n        <span style={{ color: \"crimson\" }}>{selectedAnimal}</span>\n      </span>\n      <div className=\"plots\">\n        <div id=\"food_env_impact\" className=\"plot\" />\n        <div id=\"meat_consumption\" className=\"plot\" />\n        <div id=\"animals_killed\" className=\"plot\" />\n      </div>\n      <div>\n        Icons made by{\" \"}\n        <a href=\"https://www.flaticon.com/authors/surang\" title=\"surang\">\n          surang\n        </a>{\" \"}\n        from{\" \"}\n        <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">\n          www.flaticon.com\n        </a>\n      </div>\n      <div>\n        Icons made by{\" \"}\n        <a href=\"https://www.freepik.com\" title=\"Freepik\">\n          Freepik\n        </a>{\" \"}\n        from{\" \"}\n        <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">\n          www.flaticon.com\n        </a>\n      </div>\n      <a href=\"https://www.freepik.com/vectors/background\">\n        Background vector created by starline - www.freepik.com\n      </a>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}